import React, { useState } from "react";
import useAthletes from "../hooks/useAthletes";
import "./athletes.css";
import Modal from "./Modal";
import { Athlete } from "../config/interfaces"; // Import interfaces
import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import ConfirmModal from "./ConfirmModal";

const Athletes: React.FC = () => {
  const {
    athletes,
    loading,
    error,
    updateAthlete,
    registerAthlete,
    deleteAthlete,
  } = useAthletes();
  const [searchTerm, setSearchTerm] = useState("");
  const [ageGroup, setAgeGroup] = useState("");
  const [selectedAthlete, setSelectedAthlete] = useState<null | {
    name: string;
    clubName: string;
  }>(null);
  const [editAthleteId, setEditAthleteId] = useState<number | null>(null);
  const [editAthleteData, setEditAthleteData] = useState({
    name: "",
    gender: "",
    age: "",
    clubName: "",
  });
  const [isRegisterModalOpen, setIsRegisterModalOpen] = useState(false);
  const [newAthleteData, setNewAthleteData] = useState({
    name: "",
    gender: "",
    age: "",
    clubName: "",
  });
  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);
  const [athleteToDelete, setAthleteToDelete] = useState<Athlete | null>(null);

  const filteredAthletes = athletes.filter((athlete) => {
    const nameMatches = athlete.name
      .toLowerCase()
      .includes(searchTerm.toLowerCase());
    const ageMatches =
      ageGroup === "" ||
      (ageGroup === "children" && athlete.age >= 6 && athlete.age <= 9) ||
      (ageGroup === "youth" && athlete.age >= 10 && athlete.age <= 13) ||
      (ageGroup === "junior" && athlete.age >= 14 && athlete.age <= 22) ||
      (ageGroup === "adult" && athlete.age >= 23 && athlete.age <= 40) ||
      (ageGroup === "senior" && athlete.age >= 41);
    return nameMatches && ageMatches;
  });

  const openModal = (athlete: { name: string; clubName: string }) => {
    setSelectedAthlete(athlete);
  };

  const closeModal = () => {
    setSelectedAthlete(null);
  };

  const handleEditClick = (athlete: Athlete) => {
    setEditAthleteId(athlete.memberId);
    setEditAthleteData({
      name: athlete.name,
      gender: athlete.gender,
      age: athlete.age.toString(),
      clubName: athlete.clubName,
    });
  };

  const handleSaveClick = async (athleteId: number) => {
    await updateAthlete({
      memberId: athleteId,
      name: editAthleteData.name,
      gender: editAthleteData.gender,
      age: parseInt(editAthleteData.age),
      clubName: editAthleteData.clubName,
    });
    setEditAthleteId(null);
  };

  const handleCancelClick = () => {
    setEditAthleteId(null);
  };

  const handleDeleteClick = async (athlete: Athlete) => {
    setAthleteToDelete(athlete);
    setIsConfirmModalOpen(true);
  };

  const confirmDelete = async () => {
    if (athleteToDelete) {
      await deleteAthlete(athleteToDelete.memberId);
      setIsConfirmModalOpen(false);
      setAthleteToDelete(null);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setEditAthleteData({ ...editAthleteData, [name]: value });
  };

  const handleNewAthleteChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setNewAthleteData({ ...newAthleteData, [name]: value });
  };

  const handleRegisterClick = async () => {
    await registerAthlete({
      memberId: Math.floor(Math.random() * 1000000), // This should ideally be generated by the server
      ...newAthleteData,
      age: parseInt(newAthleteData.age),
    });
    setIsRegisterModalOpen(false);
    setNewAthleteData({
      name: "",
      gender: "",
      age: "",
      clubName: "",
    });
  };

  const handleAgeGroupClick = (group: string) => {
    setAgeGroup(group);
  };

  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;

  return (
    <div className="athletes-page">
      <ToastContainer />
      <div className="filter-section">
        <h2>Atleter</h2>
        <div className="filter-container">
          <input
            type="text"
            placeholder="Search Athletes"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="search-input"
          />
          <div className="age-group-buttons">
            <button onClick={() => handleAgeGroupClick("children")}>
              Børn 6-9
            </button>
            <button onClick={() => handleAgeGroupClick("youth")}>
              Unge 10-13
            </button>
            <button onClick={() => handleAgeGroupClick("junior")}>
              Junior 14-22
            </button>
            <button onClick={() => handleAgeGroupClick("adult")}>
              Voksne 23-40
            </button>
            <button onClick={() => handleAgeGroupClick("senior")}>
              Senior 41+
            </button>
            <button onClick={() => handleAgeGroupClick("")}>Alle Aldre</button>
          </div>
        </div>
        <button onClick={() => setIsRegisterModalOpen(true)}>
          Registrér ny atlet
        </button>
      </div>
      <ul className="athletes-list">
        {filteredAthletes.map((athlete) => (
          <li key={athlete.memberId} className="athlete-item">
            {editAthleteId === athlete.memberId ? (
              <>
                <input
                  type="text"
                  name="name"
                  value={editAthleteData.name}
                  onChange={handleChange}
                />
                <input
                  type="text"
                  name="gender"
                  value={editAthleteData.gender}
                  onChange={handleChange}
                />
                <input
                  type="number"
                  name="age"
                  value={editAthleteData.age}
                  onChange={handleChange}
                />
                <input
                  type="text"
                  name="clubName"
                  value={editAthleteData.clubName}
                  onChange={handleChange}
                />
                <button onClick={() => handleSaveClick(athlete.memberId)}>
                  Save
                </button>
                <button onClick={handleCancelClick}>Fortryd</button>
              </>
            ) : (
              <>
                {athlete.name} - {athlete.gender} - {athlete.age} {"år"} -{" "}
                {athlete.clubName}
                <button
                  onClick={() =>
                    openModal({
                      name: athlete.name,
                      clubName: athlete.clubName,
                    })
                  }
                >
                  Se resultater
                </button>
                <button onClick={() => handleEditClick(athlete)}>
                  Redigér info
                </button>
                <button onClick={() => handleDeleteClick(athlete)}>
                  Slet atlet
                </button>
              </>
            )}
          </li>
        ))}
      </ul>
      <Modal
        isOpen={!!selectedAthlete}
        onClose={closeModal}
        title="Atlet Resultater"
      >
        <div>
          {/* Indsæt her indholdet af ResultsModal */}
          <p>Her vil atletens resultater blive vist.</p>
        </div>
      </Modal>
      <Modal
        isOpen={isRegisterModalOpen}
        onClose={() => setIsRegisterModalOpen(false)}
        title="Registrér ny atlet"
      >
        <div>
          <input
            type="text"
            name="name"
            placeholder="Name"
            value={newAthleteData.name}
            onChange={handleNewAthleteChange}
          />
          <input
            type="text"
            name="gender"
            placeholder="Gender"
            value={newAthleteData.gender}
            onChange={handleNewAthleteChange}
          />
          <input
            type="number"
            name="age"
            placeholder="Age"
            value={newAthleteData.age}
            onChange={handleNewAthleteChange}
          />
          <input
            type="text"
            name="clubName"
            placeholder="Club Name"
            value={newAthleteData.clubName}
            onChange={handleNewAthleteChange}
          />
          <button onClick={handleRegisterClick}>Registrér</button>
        </div>
      </Modal>
      <ConfirmModal
        isOpen={isConfirmModalOpen}
        onClose={() => setIsConfirmModalOpen(false)}
        onConfirm={confirmDelete}
        message={`Vil du fjerne ${athleteToDelete?.name}?`}
      />
    </div>
  );
};

export default Athletes;
